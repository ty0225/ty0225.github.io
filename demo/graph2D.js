/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/d3/2D-graph/index.js":
/*!**********************************!*\
  !*** ./src/d3/2D-graph/index.js ***!
  \**********************************/
/***/ (() => {

eval("window.onload = () => {\n  showChart();\n};\nfunction showChart() {\n  var data = {\n    \"links\": [{\n      \"source\": \"来源A\",\n      \"data\": {\n        \"rzs\": \"1000万美元\"\n      },\n      \"target\": \"目标A\",\n      \"relation\": \"关系A\",\n      \"sourceImg\": \"\",\n      \"targetImg\": \"\",\n      \"sourceColor\": \"#F4793B\",\n      \"targetColor\": \"#0084ff\",\n      \"sourceRadius\": \"30\",\n      \"targetRadius\": \"35\"\n    }, {\n      \"source\": \"来源A\",\n      \"data\": {\n        \"rzs\": \"12万美元\"\n      },\n      \"target\": \"目标B\",\n      \"relation\": \"关系A\",\n      \"sourceImg\": \"\",\n      \"targetImg\": \"\",\n      \"sourceColor\": \"#F4793B\",\n      \"targetColor\": \"#0084ff\",\n      \"sourceRadius\": \"30\",\n      \"targetRadius\": \"35\"\n    }, {\n      \"source\": \"来源B\",\n      \"target\": \"目标B\",\n      \"relation\": \"关系B\",\n      \"sourceImg\": \"\",\n      \"targetImg\": \"\",\n      \"sourceColor\": \"#F4793B\",\n      \"targetColor\": \"#0084ff\",\n      \"sourceRadius\": \"30\",\n      \"targetRadius\": \"35\"\n    }, {\n      \"source\": \"来源B\",\n      \"target\": \"目标C\",\n      \"relation\": \"关系C\",\n      \"sourceImg\": \"\",\n      \"sourceImg\": \"\",\n      \"targetImg\": \"\",\n      \"sourceColor\": \"#F4793B\",\n      \"targetColor\": \"#0084ff\",\n      \"sourceRadius\": \"30\",\n      \"targetRadius\": \"35\"\n    }, {\n      \"source\": \"来源B\",\n      \"target\": \"目标B\",\n      \"relation\": \"关系D\",\n      \"sourceImg\": \"\",\n      \"targetImg\": \"\",\n      \"sourceColor\": \"#F4793B\",\n      \"targetColor\": \"\",\n      \"sourceRadius\": \"30\",\n      \"targetRadius\": \"35\"\n    }, {\n      \"source\": \"来源B\",\n      \"target\": \"目标B\",\n      \"relation\": \"关系E\",\n      \"sourceImg\": \"\",\n      \"targetImg\": \"\",\n      \"sourceColor\": \"#F4793B\",\n      \"targetColor\": \"\",\n      \"sourceRadius\": \"30\",\n      \"targetRadius\": \"35\"\n    }, {\n      \"source\": \"来源B\",\n      \"target\": \"目标A\",\n      \"relation\": \"关系C\",\n      \"sourceImg\": \"\",\n      \"targetImg\": \"\",\n      \"sourceColor\": \"#F4793B\",\n      \"targetColor\": \"#0084ff\",\n      \"sourceRadius\": \"30\",\n      \"targetRadius\": \"35\"\n    }, {\n      \"source\": \"来源C\",\n      \"target\": \"目标A\",\n      \"relation\": \"关系E\",\n      \"sourceImg\": \"\",\n      \"targetImg\": \"\",\n      \"sourceColor\": \"#F4793B\",\n      \"targetColor\": \"#0084ff\",\n      \"sourceRadius\": \"30\",\n      \"targetRadius\": \"35\"\n    }]\n  };\n  var options = {};\n  options.backgroundColor = \"#777\";\n  options.nodesFontType = \"SimHei\";\n  options.nodesFontSize = 14;\n  options.lineFontType = \"SimHei\";\n  options.lineFontSize = 12;\n  options.lineColor = \"#000000\";\n  options.showExamples = true;\n  options.examplesX = 20;\n  options.examplesY = 450;\n  options.examplesFontColor = \"#000000\";\n  drawChart(\"divid\", options, data);\n}\nfunction drawChart(divid, options, datas, dataFilter) {\n  var backgroundColor = options.backgroundColor; //背景颜色\n  var nodesFontType = options.nodesFontType; //节点字体\n  var nodesFontSize = options.nodesFontSize; //节点字号\n  var lineFontType = options.lineFontType; //关系字体\n  var lineFontSize = options.lineFontSize; //关系字号\n  var lineColor = options.lineColor; //连线颜色\n  var examplesFontColor = options.examplesFontColor; //关系示例字体颜色\n\n  var width = window.innerWidth; //画布宽\n  var height = window.innerHeight; //画布高\n  var svgChart = d3.select(\"svg\");\n  svgChart.remove();\n\n  // var tip = document.getElementsByClassName(\"tooltip\");\n  // if (tip.length > 0) {\n  //     tip.parentNode.removeChild();\n  // }\n\n  var sourceDatas = {};\n  sourceDatas.links = [];\n  for (var i = 0; i < datas.links.length; i++) {\n    var jsonObj = {};\n    jsonObj.source = datas.links[i].source;\n    jsonObj.target = datas.links[i].target;\n    jsonObj.relation = datas.links[i].relation;\n    jsonObj.sourceImg = datas.links[i].sourceImg;\n    jsonObj.targetImg = datas.links[i].targetImg;\n    jsonObj.sourceColor = datas.links[i].sourceColor;\n    jsonObj.targetColor = datas.links[i].targetColor;\n    jsonObj.sourceRadius = datas.links[i].sourceRadius;\n    jsonObj.targetRadius = datas.links[i].targetRadius;\n    // 根据关系类型添加连接线的颜色\n    // jsonObj.lineColor = datas.links[i].lineColor;\n    switch (datas.links[i].relation) {\n      case '关系A':\n        jsonObj.lineColor = '#458B00';\n        break;\n      case '关系B':\n        jsonObj.lineColor = '#EEEE00';\n        break;\n      case '关系C':\n        jsonObj.lineColor = '#8fd2e1';\n        break;\n      case '关系D':\n        jsonObj.lineColor = '#c2de96';\n        break;\n      case '关系E':\n        jsonObj.lineColor = '#ff4c00';\n        break;\n      default:\n        jsonObj.lineColor = '#000';\n    }\n    jsonObj.data = datas.links[i].data;\n    sourceDatas.links.push(jsonObj);\n  }\n  var resourceLinks = sourceDatas.links;\n  if (dataFilter != undefined && dataFilter.length > 0) {\n    var indexArray = [];\n    for (var i = 0; i < dataFilter.length; i++) {\n      for (var j = 0; j < resourceLinks.length; j++) {\n        if (resourceLinks[j].relation == dataFilter[i].relation && dataFilter[i].isShow == \"false\") {\n          indexArray.push(j);\n        }\n      }\n    }\n    if (indexArray.length > 0) {\n      var tempArray = [];\n      for (var j = 0; j < resourceLinks.length; j++) {\n        for (var i = 0; i < indexArray.length; i++) {\n          if (indexArray[i] != j) {\n            if (i == indexArray.length - 1) {\n              tempArray.push(resourceLinks[j]);\n              break;\n            }\n            continue;\n          } else {\n            break;\n          }\n        }\n      }\n      resourceLinks = tempArray;\n    }\n  }\n  var links = resourceLinks;\n\n  //关系分组  \n  var linkGroup = {};\n  //对连接线进行统计和分组，不区分连接线的方向，只要属于同两个实体，即认为是同一组  \n  var linkmap = {};\n  for (var i = 0; i < links.length; i++) {\n    var key = links[i].source < links[i].target ? links[i].source + ':' + links[i].target : links[i].target + ':' + links[i].source;\n    if (!linkmap.hasOwnProperty(key)) {\n      linkmap[key] = 0;\n    }\n    linkmap[key] += 1;\n    if (!linkGroup.hasOwnProperty(key)) {\n      linkGroup[key] = [];\n    }\n    linkGroup[key].push(links[i]);\n  }\n  //为每一条连接线分配size属性，同时对每一组连接线进行编号  \n  for (var i = 0; i < links.length; i++) {\n    var key = links[i].source < links[i].target ? links[i].source + ':' + links[i].target : links[i].target + ':' + links[i].source;\n    links[i].size = linkmap[key];\n    //同一组的关系进行编号  \n    var group = linkGroup[key];\n    //给节点分配编号  \n    setLinkNumber(group);\n  }\n\n  //节点\n  var nodes = {};\n  //关系对应颜色\n  var relationColor = {};\n  for (var i = 0; i < links.length; i++) {\n    links[i].source = nodes[links[i].source] || (nodes[links[i].source] = {\n      name: links[i].source,\n      color: links[i].sourceColor,\n      image: links[i].sourceImg,\n      radius: links[i].sourceRadius\n    });\n    links[i].target = nodes[links[i].target] || (nodes[links[i].target] = {\n      name: links[i].target,\n      color: links[i].targetColor,\n      image: links[i].targetImg,\n      radius: links[i].targetRadius\n    });\n  }\n  var sourceData = datas.links;\n  for (var i = 0; i < sourceData.length; i++) {\n    relationColor[sourceData[i].relation] = {\n      \"relation\": sourceData[i].relation,\n      \"lineColor\": sourceData[i].lineColor\n    };\n  }\n  nodes = d3.values(nodes);\n  relationColor = d3.values(relationColor);\n  var examples_x = parseFloat(options.examplesX); //关系示例坐标x\n  var examples_y = parseFloat(options.examplesY); //关系示例坐标y\n  var examplesLength = 80;\n  var examplesSize = Math.floor((width - examples_x) / examplesLength);\n  var examplesRow = relationColor.length % examplesSize == 0 ? relationColor.length / examplesSize : Math.ceil(relationColor.length / examplesSize);\n  //计算关系示列位置\n  for (var i = 1; i <= relationColor.length; i++) {\n    var num = i % examplesSize == 0 ? examplesSize : i % examplesSize;\n    relationColor[i - 1].x = examples_x + (num - 1) * examplesLength;\n    relationColor[i - 1].y = examples_y + 20 * Math.ceil(i / examplesSize);\n  }\n  if (dataFilter == undefined) {\n    dataFilter = [];\n    for (var i = 0; i < relationColor.length; i++) {\n      dataFilter.push({\n        \"relation\": relationColor[i].relation,\n        \"isShow\": \"true\"\n      });\n    }\n  }\n\n  //绑定相连节点\n  for (var i = 0; i < nodes.length; i++) {\n    for (var j = 0; j < links.length; j++) {\n      if (nodes[i].name == links[j].source.name) {\n        nodes[i][links[j].target.name] = {\n          name: links[j].target.name\n        };\n      }\n      if (nodes[i].name == links[j].target.name) {\n        nodes[i][links[j].source.name] = {\n          name: links[j].source.name\n        };\n      }\n    }\n  }\n  //D3力导向布局\n  var force = d3.layout.force().nodes(nodes).links(links).size([width, height]).linkDistance(200).charge(-1500).start();\n  // 全图缩放器\n  var zoom = d3.behavior.zoom().scaleExtent([0.25, 2]).on('zoom', zoomFn);\n  var svg = d3.select(\"#\" + divid).append(\"svg\").attr(\"width\", width).attr(\"height\", height).attr(\"style\", \"background-color:\" + backgroundColor).call(zoom).on('dblclick.zoom', null);\n  // 缩放层（位置必须在 container 之前）\n  var zoomOverlay = svg.append('rect').attr('width', width).attr('height', height).style('fill', 'none').style('pointer-events', 'all');\n  var container = svg.append('g')\n  // .attr('transform', 'scale(' + 0.6 + ')')\n  .attr('class', 'container');\n  // 根据分类进行筛选\n  if (options.showExamples) {\n    var examples = svg.selectAll(\".examples\").data(relationColor).enter().append(\"svg:g\").attr(\"fill-opacity\", function (d) {\n      for (var i = 0; i < dataFilter.length; i++) {\n        if (d.relation == dataFilter[i].relation && dataFilter[i].isShow == \"false\") {\n          return 0.2;\n        }\n      }\n      return 1;\n    }).attr('transform', 'translate(' + 100 + ',' + 200 + ')').on(\"click\", function (d) {\n      for (var i = 0; i < dataFilter.length; i++) {\n        if (dataFilter[i].relation == d.relation) {\n          if (dataFilter[i].isShow == \"true\") {\n            dataFilter[i].isShow = \"false\";\n          } else {\n            dataFilter[i].isShow = \"true\";\n          }\n        }\n      }\n      drawChart(divid, options, datas, dataFilter);\n    });\n    examples.append(\"svg:path\").attr(\"d\", function (d) {\n      var x1 = d.x;\n      var y1 = d.y;\n      var x2 = x1 + 20;\n      var y2 = y1;\n      return 'M' + x1 + ' ' + y1 + ' L ' + x2 + ' ' + y2;\n    }).style(\"stroke\", function (d) {\n      if (d.lineColor == \"\") {\n        return lineColor;\n      } else {\n        return d.lineColor;\n      }\n    }).style(\"stroke-width\", 2.5);\n    examples.append(\"svg:text\").style(\"font-size\", \"14px\").style(\"fill\", examplesFontColor).attr(\"x\", function (d) {\n      if (d.relation.length > 3) {\n        return d.x + 20 + 14 * 4 / 2;\n      }\n      return d.x + 20 + 14 * d.relation.length / 2;\n    }).attr(\"y\", function (d) {\n      return d.y + 5;\n    }).attr('text-anchor', \"middle\").text(function (d) {\n      if (d.relation.length > 3) {\n        return d.relation.substring(0, 3) + \"...\";\n      }\n      return d.relation;\n    });\n    // .on(\"mouseover\", function (d) {\n    //     console.log('放到分类上');\n    //     tooltip.html(\"<span>\" + d.relation + \"</span>\")\n    //         .style(\"left\", (d3.event.pageX) + \"px\")\n    //         .style(\"top\", (d3.event.pageY + 20) + \"px\")\n    //         .style(\"display\", \"block\")\n    //         .style(\"position\", \"absolute\")\n    //         .style(\"opacity\", 1.0);\n    // })\n    // .on(\"mouseout\", function (d, i) {\n    //     tooltip.style(\"opacity\", 0.0);\n    // });\n  }\n\n  function zoomFn() {\n    console.log('开始移动了');\n    const {\n      translate,\n      scale\n    } = d3.event;\n    console.log(container);\n    container.attr('transform', 'translate(' + translate + ')scale(' + scale + ')');\n  }\n  //设置连接线             \n  var edges_path = container.selectAll(\".edgepath\").data(links).enter().append(\"path\").attr(\"marker-end\", function (d, i) {\n    var arrowMarker = container.append(\"marker\").attr(\"id\", \"arrow\" + i).attr(\"markerUnits\", \"userSpaceOnUse\").attr(\"markerWidth\", \"16\").attr(\"markerHeight\", \"15\").attr(\"viewBox\", \"0 0 12 12\").attr(\"refX\", 9).attr(\"refY\", 6).attr(\"orient\", \"auto\").append(\"svg:path\").attr(\"d\", \"M2,2 L10,6 L2,10 L6,6 L2,2\").attr(\"fill\", function () {\n      return d.lineColor =  false ? 0 : d.lineColor;\n    });\n    return \"url(#arrow\" + i + \")\";\n  }).style(\"stroke\", function (d) {\n    if (d.lineColor == \"\") {\n      return lineColor;\n    } else {\n      return d.lineColor;\n    }\n  }).style(\"stroke-width\", 1.5).on(\"mouseover\", function (d) {\n    console.log('放到连接线');\n    // 设置参股或是融资信息\n    // if (d.data) {\n    //     tooltip.html(\"<span>\" + '融资额:' + d.data.rzs + \"</span>\")\n    //         .style(\"left\", (d3.event.pageX) + \"px\")\n    //         .style(\"top\", (d3.event.pageY + 20) + \"px\")\n    //         .style(\"display\", \"block\")\n    //         .style(\"opacity\", 1.0);\n    // }\n    //影藏其它连线上文字\n    edges_text.style(\"fill-opacity\", function (edge) {\n      if (edge === d) {\n        return 1;\n      }\n      return 0;\n    });\n    edges_path.style(\"stroke-width\", function (edge) {\n      if (edge === d) {\n        return 4;\n      }\n      return 1.5;\n    });\n  }).on(\"mouseout\", function (d, i) {\n    //显示连线上的文字\n    edges_text.style(\"fill-opacity\", 1);\n    edges_path.style(\"stroke-width\", 1.5);\n    // 隐藏提示信息\n    // tooltip.style(\"opacity\", 0.0);\n  });\n\n  //边上的文字（人物之间的关系），连接线            \n  var edges_text = container.selectAll(\".linetext\").data(links).enter().append(\"svg:g\").attr(\"class\", \"linetext\").attr(\"fill-opacity\", 1);\n  edges_text.append(\"svg:text\").style(\"font-size\", 12 + \"px\").style(\"font-family\", lineFontType).style(\"fill\", \"#000000\").attr(\"y\", \".33em\").attr('text-anchor', \"middle\").text(function (d) {\n    return d.relation;\n  });\n  edges_text.insert('rect', 'text').attr('width', function (d) {\n    return d.relation.length * lineFontSize;\n  }).attr('height', function (d) {\n    return lineFontSize;\n  }).attr(\"y\", \"-.6em\").attr('x', function (d) {\n    return -d.relation.length * lineFontSize / 2;\n  }).style('fill', 'none');\n\n  // 节点设置，包含圆形图片节点（人物头像）\n  var circle = container.selectAll(\"circle\").data(nodes).enter().append(\"circle\").style(\"stroke\", function (d) {\n    if (d.color == \"\") {\n      return \"#EE8262\";\n    } else if (d.color == '#0084ff') {\n      return '#0077c6';\n    } else if (d.color == '#F4793B') {\n      return '#FC3620';\n    }\n    return d.color;\n  }).style(\"stroke-width\", \"2px\").attr(\"r\", function (d) {\n    return d.radius;\n  }).attr(\"fill\", function (d, i) {\n    //节点图片不为空是添加背景色\n    if (d.image == \"\") {\n      if (d.color == \"\") {\n        return \"#EE8262\";\n      }\n      return d.color;\n    } else {\n      //创建圆形图片\n      var defs = container.append(\"defs\").attr(\"id\", \"imgdefs\");\n      var catpattern = defs.append(\"pattern\").attr(\"id\", \"catpattern\" + i).attr(\"height\", 1).attr(\"width\", 1);\n      catpattern.append(\"image\")\n      /* .attr(\"x\", - (img_w / 2 - radius))\n      .attr(\"y\", - (img_h / 2 - radius)) */.attr(\"width\", d.radius * 2).attr(\"height\", d.radius * 2).attr(\"xlink:href\", d.image);\n      return \"url(#catpattern\" + i + \")\";\n    }\n  }).on(\"mouseover\", function (d, i) {\n    console.log('放到人物头像');\n    //影藏其它连线上文字\n    edges_text.style(\"fill-opacity\", function (edge) {\n      if (edge.source === d || edge.target === d) {\n        return 1;\n      }\n      if (edge.source !== d && edge.target !== d) {\n        return 0;\n      }\n    });\n    //其它节点亮度调低\n    circle.style(\"opacity\", function (edge) {\n      var v = d.name;\n      if (edge.name == v || edge[v] != undefined && edge[v].name == v) {\n        return 1;\n      } else {\n        return 0.2;\n      }\n    });\n    //其他连先亮度调低\n    edges_path.style(\"opacity\", function (edge) {\n      if (edge.source === d || edge.target === d) {\n        return 1;\n      }\n      if (edge.source !== d && edge.target !== d) {\n        return 0.2;\n      }\n    });\n    //其他节点文字亮度调低\n    nodes_text.style(\"opacity\", function (edge) {\n      var v = d.name;\n      if (edge.name == v || edge[v] != undefined && edge[v].name == v) {\n        return 1;\n      } else {\n        return 0.2;\n      }\n    });\n  }).on(\"mouseout\", function (d, i) {\n    //显示连线上的文字\n    edges_text.style(\"fill-opacity\", 1);\n    edges_path.style(\"opacity\", 1);\n    circle.style(\"opacity\", 1);\n    nodes_text.style(\"opacity\", 1);\n    // tooltip.style(\"opacity\", 0.0);\n  }).call(force.drag);\n\n  // var tooltip = d3.select(\"body\").append(\"div\")\n  //     .attr(\"class\", \"tooltip\")\n  //     .attr(\"opacity\", 0.0);\n\n  // 节点文字设置\n  var nodes_text = container.selectAll(\".nodetext\").data(nodes).enter().append(\"text\").style(\"font-size\", nodesFontSize + \"px\").style(\"fill\", \"#ffffff\").style(\"font-family\", nodesFontType).attr('x', function (d) {\n    var name = d.name;\n    //如果小于四个字符，不换行\n    if (name.length < 4) {\n      d3.select(this).append('tspan').attr(\"dx\", -nodesFontSize * (name.length / 2)).attr(\"dy\", 5).text(function () {\n        return name;\n      });\n    } else if (name.length >= 4 && name.length <= 6) {\n      var top = d.name.substring(0, 3);\n      var bot = d.name.substring(3, name.length);\n      d3.select(this).append('tspan').attr(\"dx\", -nodesFontSize * 1.5).attr(\"dy\", -nodesFontSize * 0.5).text(function () {\n        return top;\n      });\n      d3.select(this).append('tspan').attr(\"dx\", -(nodesFontSize * name.length / 2)).attr(\"dy\", nodesFontSize).text(function () {\n        return bot;\n      });\n    } else if (name.length > 7) {\n      var top = d.name.substring(0, 3);\n      var mid = d.name.substring(3, 6);\n      var bot = d.name.substring(6, name.length);\n      d3.select(this).append('tspan').attr(\"dx\", -nodesFontSize * 1.5).attr(\"dy\", -nodesFontSize * 0.5).text(function () {\n        return top;\n      });\n      d3.select(this).append('tspan').attr(\"dx\", -nodesFontSize * 3).attr(\"dy\", nodesFontSize).text(function () {\n        return mid;\n      });\n      d3.select(this).append('tspan').attr(\"dx\", -nodesFontSize * 2).attr(\"dy\", nodesFontSize).text(function () {\n        return \"...\";\n      });\n    }\n  }).on(\"mouseover\", function (d, i) {\n    console.log('放到关系文字');\n    //影藏其它连线上文字\n    edges_text.style(\"fill-opacity\", function (edge) {\n      if (edge.source === d || edge.target === d) {\n        return 1;\n      }\n      if (edge.source !== d && edge.target !== d) {\n        return 0;\n      }\n    });\n    //其他节点亮度调低\n    circle.style(\"opacity\", function (edge) {\n      var v = d.name;\n      if (edge.name == v || edge[v] != undefined && edge[v].name == v) {\n        return 1;\n      } else {\n        return 0.2;\n      }\n    });\n    //其他连线亮度调低\n    edges_path.style(\"opacity\", function (edge) {\n      if (edge.source === d || edge.target === d) {\n        return 1;\n      }\n      if (edge.source !== d && edge.target !== d) {\n        return 0.2;\n      }\n    });\n    //其他节点文字亮度调低\n    nodes_text.style(\"opacity\", function (edge) {\n      var v = d.name;\n      if (edge.name == v || edge[v] != undefined && edge[v].name == v) {\n        return 1;\n      } else {\n        return 0.2;\n      }\n    });\n    // tooltip.html(\"<span>\" + d.name + \"</span>\")\n    //     .style(\"left\", (d3.event.pageX) + \"px\")\n    //     .style(\"top\", (d3.event.pageY + 20) + \"px\")\n    //     .style(\"display\", \"block\")\n    //     .style(\"opacity\", 1.0);\n  }).on(\"mouseout\", function (d, i) {\n    //显示连线上的文字\n    edges_text.style(\"fill-opacity\", 1);\n    edges_path.style(\"opacity\", 1);\n    circle.style(\"opacity\", 1);\n    nodes_text.style(\"opacity\", 1);\n    // tooltip.style(\"opacity\", 0.0);\n  }).call(force.drag);\n  //   拖动节点\n  var drag = force.drag().on(\"dragstart\", function (d, i) {\n    d.fixed = true; //拖拽开始后设定被拖拽对象为固定\n    d3.event.sourceEvent.stopPropagation();\n  }).on(\"dragend\", function (d, i) {}).on(\"drag\", function (d, i) {});\n\n  //力学图运动开始时\n  force.on(\"start\", function () {});\n\n  //力学图运动结束时\n  force.on(\"end\", function () {});\n  force.on(\"tick\", function () {\n    edges_path.attr(\"d\", function (d) {\n      var tan = Math.abs((d.target.y - d.source.y) / (d.target.x - d.source.x)); //圆心连线tan值\n      var x1 = d.target.x - d.source.x > 0 ? Math.sqrt(d.sourceRadius * d.sourceRadius / (tan * tan + 1)) + d.source.x : d.source.x - Math.sqrt(d.sourceRadius * d.sourceRadius / (tan * tan + 1)); //起点x坐标\n      var y1 = d.target.y - d.source.y > 0 ? Math.sqrt(d.sourceRadius * d.sourceRadius * tan * tan / (tan * tan + 1)) + d.source.y : d.source.y - Math.sqrt(d.sourceRadius * d.sourceRadius * tan * tan / (tan * tan + 1)); //起点y坐标\n      var x2 = d.target.x - d.source.x > 0 ? d.target.x - Math.sqrt(d.targetRadius * d.targetRadius / (1 + tan * tan)) : d.target.x + Math.sqrt(d.targetRadius * d.targetRadius / (1 + tan * tan)); //终点x坐标\n      var y2 = d.target.y - d.source.y > 0 ? d.target.y - Math.sqrt(d.targetRadius * d.targetRadius * tan * tan / (1 + tan * tan)) : d.target.y + Math.sqrt(d.targetRadius * d.targetRadius * tan * tan / (1 + tan * tan)); //终点y坐标\n      if (d.target.x - d.source.x == 0 || tan == 0) {\n        //斜率无穷大的情况或为0时\n        y1 = d.target.y - d.source.y > 0 ? d.source.y + d.sourceRadius : d.source.y - d.sourceRadius;\n        y2 = d.target.y - d.source.y > 0 ? d.target.y - d.targetRadius : d.target.y + d.targetRadius;\n      }\n      // 防报错\n      if (!x1 || !y1 || !x2 || !y2) {\n        return;\n      }\n      if (d.linknum == 0) {\n        //设置编号为0的连接线为直线，其他连接线会均分在两边  \n        d.x_start = x1;\n        d.y_start = y1;\n        d.x_end = x2;\n        d.y_end = y2;\n        return 'M' + x1 + ' ' + y1 + ' L ' + x2 + ' ' + y2;\n      }\n      var a = d.sourceRadius > d.targetRadius ? d.targetRadius * d.linknum / 3 : d.sourceRadius * d.linknum / 3;\n      var xm = d.target.x - d.source.x > 0 ? d.source.x + Math.sqrt((d.sourceRadius * d.sourceRadius - a * a) / (1 + tan * tan)) : d.source.x - Math.sqrt((d.sourceRadius * d.sourceRadius - a * a) / (1 + tan * tan));\n      var ym = d.target.y - d.source.y > 0 ? d.source.y + Math.sqrt((d.sourceRadius * d.sourceRadius - a * a) * tan * tan / (1 + tan * tan)) : d.source.y - Math.sqrt((d.sourceRadius * d.sourceRadius - a * a) * tan * tan / (1 + tan * tan));\n      var xn = d.target.x - d.source.x > 0 ? d.target.x - Math.sqrt((d.targetRadius * d.targetRadius - a * a) / (1 + tan * tan)) : d.target.x + Math.sqrt((d.targetRadius * d.targetRadius - a * a) / (1 + tan * tan));\n      var yn = d.target.y - d.source.y > 0 ? d.target.y - Math.sqrt((d.targetRadius * d.targetRadius - a * a) * tan * tan / (1 + tan * tan)) : d.target.y + Math.sqrt((d.targetRadius * d.targetRadius - a * a) * tan * tan / (1 + tan * tan));\n      if (d.target.x - d.source.x == 0 || tan == 0) {\n        //斜率无穷大或为0时\n        ym = d.target.y - d.source.y > 0 ? d.source.y + Math.sqrt(d.sourceRadius * d.sourceRadius - a * a) : d.source.y - Math.sqrt(d.sourceRadius * d.sourceRadius - a * a);\n        yn = d.target.y - d.source.y > 0 ? d.target.y - Math.sqrt(d.targetRadius * d.targetRadius - a * a) : d.target.y + Math.sqrt(d.targetRadius * d.targetRadius - a * a);\n      }\n      var k = (x1 - x2) / (y2 - y1); //连线垂线的斜率\n      var dx = Math.sqrt(a * a / (1 + k * k)); //相对垂点x轴距离\n      var dy = Math.sqrt(a * a * k * k / (1 + k * k)); //相对垂点y轴距离\n      if (y2 - y1 == 0) {\n        dx = 0;\n        dy = Math.sqrt(a * a);\n      }\n      if (a > 0) {\n        var xs = k > 0 ? xm - dx : xm + dx;\n        var ys = ym - dy;\n        var xt = k > 0 ? xn - dx : xn + dx;\n        var yt = yn - dy;\n      } else {\n        var xs = k > 0 ? xm + dx : xm - dx;\n        var ys = ym + dy;\n        var xt = k > 0 ? xn + dx : xn - dx;\n        var yt = yn + dy;\n      }\n      //记录连线起始和终止坐标，用于定位线上文字\n      d.x_start = xs;\n      d.y_start = ys;\n      d.x_end = xt;\n      d.y_end = yt;\n      return 'M' + xs + ' ' + ys + ' L ' + xt + ' ' + yt;\n    });\n\n    //更新连接线上文字的位置\n    edges_text.attr(\"transform\", function (d) {\n      // 防止报错\n      if (!d.x_start || !d.y_start || !d.x_end || !d.y_end) {\n        return;\n      }\n      return \"translate(\" + (d.x_start + d.x_end) / 2 + \",\" + (+d.y_start + +d.y_end) / 2 + \")\" + \" rotate(\" + Math.atan((d.y_end - d.y_start) / (d.x_end - d.x_start)) * 180 / Math.PI + \")\";\n    });\n\n    //更新结点图片和文字\n    circle.attr(\"cx\", function (d) {\n      return d.x;\n    });\n    circle.attr(\"cy\", function (d) {\n      return d.y;\n    });\n    nodes_text.attr(\"x\", function (d) {\n      return d.x;\n    });\n    nodes_text.attr(\"y\", function (d) {\n      return d.y;\n    });\n  });\n}\n\n// 分配編號\nfunction setLinkNumber(group) {\n  if (group.length == 0) return;\n  if (group.length == 1) {\n    group[0].linknum = 0;\n    return;\n  }\n  var maxLinkNumber = group.length % 2 == 0 ? group.length / 2 : (group.length - 1) / 2;\n  if (group.length % 2 == 0) {\n    var startLinkNum = -maxLinkNumber + 0.5;\n    for (var i = 0; i < group.length; i++) {\n      group[i].linknum = startLinkNum++;\n    }\n  } else {\n    var startLinkNum = -maxLinkNumber;\n    for (var i = 0; i < group.length; i++) {\n      group[i].linknum = startLinkNum++;\n    }\n  }\n}\n\n//# sourceURL=webpack://three/./src/d3/2D-graph/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/d3/2D-graph/index.js"]();
/******/ 	
/******/ })()
;